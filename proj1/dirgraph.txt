#!/bin/sh
export POSIXLY_CORRECT=yes
exitcode=0
print_size()
{
    hash_count=$1
    while [ "$hash_count" -gt 0 ]
    do
        printf "#"
        hash_count="$((hash_count-1))"
    done
}
#recursively explores folders and files
# $1 = destination dir
explore_dir()
{
    for f in "$1"/* "$1"/.[!.]*
    do
    if [ "$REGEX_PATTERN" ];then
        matches_count=$(basename "${f}" | grep -Ec "$REGEX_PATTERN" 2>/dev/null)
        operation_result="$?"
        if [ "$operation_result" -eq "2" ]; then
            echo "Regular expression format error">&2
            exit 1
        elif [ ! "$matches_count" -eq "0" ];then
            continue
        fi
    fi
    if [ -f "$f" ]; then
        if [ ! -r "$f" ];then
         exitcode=1
            continue  
        fi
        filecount=$((filecount+1))
        size=$(wc -c < "$f")
        if [ "$size" -lt 100 ];then          #<100B
            L100B="$((L100B+1))" 
        elif [ "$size" -lt 1024 ];then       #<1KiB
            L1KiB="$((L1KiB+1))"
        elif [ "$size" -lt 10240 ];then      #<10KiB
            L10KiB="$((L10KiB+1))"
        elif [ "$size" -lt 102400 ];then     #<100KiB
            L100KiB="$((L100KiB+1))"
        elif [ "$size" -lt 1048576 ];then    #<1MiB
            L1MiB="$((L1MiB+1))"
        elif [ "$size" -lt 10485760 ];then   #<10MiB
            L10MiB="$((L10MiB+1))"
        elif [ "$size" -lt 104857600 ];then  #<100MiB
            L100MiB="$((L100MiB+1))"
        elif [ "$size" -lt 1073741824 ];then #<1GiB
            L1GiB="$((L1GiB+1))"
        else                                 #>=1GiB
            GE1GiB="$((GE1GiB+1))"
        fi
    elif [ -d "$f" ]; then
        dircount=$((dircount+1))
        explore_dir "$f"
    fi
    done 
}
#max value of var (number) from args
max()
{
    max=$1
    for i in "$@"
    do
        if [ "$i" -gt "$max" ]; then
            max="$i"
        fi
        shift
    done
    echo "$max"
}
#$1 - dividend
#$2 - divisor
div_and_ceil()
{
    echo "(($1+$2-1)/$2)" | bc
}
while getopts :i:n arg
do 
    case "$arg" in
        i)
        REGEX_PATTERN=$OPTARG
        ;;
        n)
        normalize=1
        ;;
        *)
        echo "invalid args" >&2
        exit 1
    esac 
done
#remove processed args
OPTIND="$((OPTIND-1))"
shift $OPTIND
#default root dir
DIR=$(pwd)
#check remaining args (should be directory name)
if [ $# -eq 1 ];
then
    DIR="$1" #set root dir as arg
    if [ ! -d "$DIR" ];
    then
        echo "Non existing directory">&2
        exit 1
    fi
elif [ $# -ge 1 ];
then
    echo "invalid args">&2  
    exit 1
fi

#REGEX from user cant match root dir 
if [ "$REGEX_PATTERN" ];then
    matches_count=$(basename "${DIR}" | grep -Ec "$REGEX_PATTERN" 2>/dev/null)
    operation_result="$?"
    if [ "$operation_result" -eq "2" ]; then
        echo "Regular expression format error">&2
        exit 1
    elif [ ! "$matches_count" -eq "0" ];then
        echo "Regular expression must not match root dir name">&2
        exit 1
    fi
fi
#variables init
filecount=0
dircount=1 #always contains root dir
L100B=0
L1KiB=0
L10KiB=0
L100KiB=0
L1MiB=0
L10MiB=0
L100MiB=0
L1GiB=0
GE1GiB=0

#call function for recursive search through folders
explore_dir "$DIR"

if [ "$normalize" = "1" ]; then
    #boga="$(tput cols)"
    if [ -t 0 ]; then
        max="$(tput cols)"
        max=$((max-12-1)) #line maxlenght-1-category print length
    else
        max=79
    fi
    #most occured size of file 
    maxfile=$(max $L100B $L1KiB $L10KiB $L100KiB $L1MiB $L10MiB $L100MiB $L1GiB $GE1GiB)
    #max hashed doesnt fit line - normalize
    if [ "$maxfile" -gt "$max" ]; then
        rate=$(echo "$maxfile/$max" | bc -l)
        L100B=$(div_and_ceil "$L100B" "$rate")
        L1KiB=$(div_and_ceil "$L1KiB" "$rate")
        L10KiB=$(div_and_ceil "$L10KiB" "$rate")
        L100KiB=$(div_and_ceil "$L100KiB" "$rate")
        L1MiB=$(div_and_ceil "$L1MiB" "$rate")
        L10MiB=$(div_and_ceil "$L10MiB" "$rate")
        L100MiB=$(div_and_ceil "$L100MiB" "$rate")
        L1GiB=$(div_and_ceil "$L1GiB" "$rate")
        GE1GiB=$(div_and_ceil "$GE1GiB" "$rate")
    fi
fi
echo "Root directory: $DIR"
echo "Directories: $dircount"
echo "All files: $filecount"
echo "File size histogram:"
printf "  <100 B  : ";print_size "$L100B" ; printf "\\n"
printf "  <1 KiB  : ";print_size "$L1KiB" ; printf "\\n"
printf "  <10 KiB : ";print_size "$L10KiB" ; printf "\\n"
printf "  <100 KiB: ";print_size "$L100KiB" ; printf "\\n"
printf "  <1 MiB  : ";print_size "$L1MiB" ; printf "\\n"
printf "  <10 MiB : ";print_size "$L10MiB" ; printf "\\n"
printf "  <100 MiB: ";print_size "$L100MiB" ; printf "\\n"
printf "  <1 GiB  : ";print_size "$L1GiB" ; printf "\\n"
printf "  >=1 GiB : ";print_size "$GE1GiB" ; printf "\\n"
if [ ! $exitcode -eq 0 ]; then
    echo "Access to some files denied">&2
    exit $exitcode
fi
